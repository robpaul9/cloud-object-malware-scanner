package gcp

import (
	"context"

	log "github.com/robpaul9/golog"

	"cloud.google.com/go/storage"
	"github.com/pkg/errors"
)

type Config struct {
	Logger  log.Logger
	Context context.Context
}

type GCPInterface interface {
	DoesObjectExist(string, string) error
}

type Service struct {
	GCPInterface
	StorageClient *storage.Client
	*Config
}

func New(config *Config) *Service {
	config.Context = context.Background()

	storageClient, err := storage.NewClient(config.Context)
	if err != nil {
		config.Logger.Panic(err)
	}

	return &Service{
		StorageClient: storageClient,
		Config:        config,
	}
}

func (s *Service) DoesObjectExist(bucketName, objectName string) error {
	bkt := s.StorageClient.Bucket(bucketName)
	obj := bkt.Object(objectName)

	r, err := obj.NewReader(s.Context)

	if err != nil {
		return errors.Wrapf(err, "object not found")
	}
	defer r.Close()

	return nil

}
