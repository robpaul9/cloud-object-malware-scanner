package metadefender

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"strconv"
	"time"

	"github.com/pkg/errors"
	"github.com/robpaul9/cloud-object-malware-scanner/entities/convert"
	log "github.com/robpaul9/golog"

	"github.com/robpaul9/cloud-object-malware-scanner/models"
)

type Config struct {
	Logger                     log.Logger
	Context                    context.Context
	MetadefenderAPIKey         string
	MetadefenderRequestTimeout time.Duration
}

type IMetadefender interface {
	LookupHash(hash string) (models.ScanResults, error)
	ScanBytes(object []byte) (map[string]interface{}, error)
}

type Service struct {
	*Config
	IMetadefender
}

func New(config *Config) *Service {
	return &Service{
		Config: config,
	}
}

func (s *Service) LookupHash(hash string) (models.ScanResults, error) {
	var scanResults models.ScanResults
	URL := fmt.Sprintf("https://api.metadefender.com/v4/hash/%v", hash)

	spaceClient := http.Client{
		Timeout: time.Second * s.MetadefenderRequestTimeout,
	}

	req, err := http.NewRequest(http.MethodGet, URL, nil)
	if err != nil {
		return models.ScanResults{}, err
	}

	req.Header.Add("apikey", s.MetadefenderAPIKey)
	req.Header.Add("Content-Type", "application/json")

	res, err := spaceClient.Do(req)
	if err != nil {
		return models.ScanResults{}, err
	}

	if res.StatusCode == 404 {
		scanResults.ScanResultInt = 404
		scanResults.ScanResultString = "No hash found"
		return scanResults, nil
	}

	if res.StatusCode != 200 {
		scanResults.Error = "Server Error"
		return scanResults, fmt.Errorf("unable to connect to metadefender. Status code %d", res.StatusCode)
	}

	scanResults, err = s.parseResults(*res)
	if err != nil {
		scanResults.Error = "Server Error"
		return scanResults, errors.Wrapf(err, "unable to parse metadefender scan results")
	}

	return scanResults, nil
}

func (s *Service) ScanBytes(object []byte) (map[string]interface{}, error) {
	spaceClient := http.Client{
		Timeout: time.Second * s.MetadefenderRequestTimeout,
	}

	req, err := http.NewRequest(http.MethodPost,
		"https://api.metadefender.com/v4/file", bytes.NewBuffer(object))
	if err != nil {
		return nil, err
	}

	req.Header.Add("apikey", s.MetadefenderAPIKey)
	req.Header.Add("Content-Type", "application/octet-stream")

	res, err := spaceClient.Do(req)
	if err != nil {
		return nil, err
	}

	if res.StatusCode != 200 {
		return nil, fmt.Errorf("unable to connect to metadefender. Status code %d", res.StatusCode)
	}

	body, err := convert.JSONResponseToMap(*res)
	if err != nil {
		return nil, errors.Wrapf(err, "unable to parse metadefender scan results")
	}

	return body, nil

}

func (s *Service) parseResults(res http.Response) (models.ScanResults, error) {
	var newScanResults models.ScanResults
	var data map[string]interface{}

	data, err := convert.JSONResponseToMap(res)
	if err != nil {
		return newScanResults, errors.Wrapf(err, "unable to parse metadefender JSON results")
	}

	scanResults := data["scan_results"].(map[string]interface{})

	newScanResults.ScanResultString = fmt.Sprintf("%v", scanResults["scan_all_result_a"])

	tmpResultString := fmt.Sprintf("%v", scanResults["scan_all_result_i"])
	scanResultInt, err := strconv.Atoi(tmpResultString)
	if err != nil {
		scanResultInt = 999
	}
	newScanResults.ScanResultInt = int(scanResultInt)

	return newScanResults, nil
}
