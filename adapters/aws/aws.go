package aws

import (
	"bytes"
	"context"
	"io/ioutil"

	log "github.com/robpaul9/golog"

	awsconfig "github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/pkg/errors"
)

type Config struct {
	Logger  log.Logger
	Context context.Context
	Region  string
}

type AWSInterface interface {
	DoesObjectExist(string, string) error
	ReadObjectBytes(string, string) ([]byte, error)
}

type Service struct {
	AWSInterface
	StorageClient *s3.Client
	*Config
}

func New(config *Config) *Service {
	config.Context = context.Background()

	cfg, err := awsconfig.LoadDefaultConfig(config.Context, awsconfig.WithRegion(config.Region))
	if err != nil {
		config.Logger.Fatal(err)
	}

	storageClient := s3.NewFromConfig(cfg)

	return &Service{
		StorageClient: storageClient,
		Config:        config,
	}
}

func (s *Service) DoesObjectExist(bucketName, objectName string) error {
	_, err := s.StorageClient.GetObject(s.Context, &s3.GetObjectInput{
		Bucket: &bucketName,
		Key:    &objectName,
	})

	if err != nil {
		return errors.Wrapf(err, "object not found")
	}

	return nil
}

func (s *Service) ReadObjectBytes(bucketName, objectName string) ([]byte, error) {
	rc, err := s.StorageClient.GetObject(s.Context, &s3.GetObjectInput{
		Bucket: &bucketName,
		Key:    &objectName,
	})

	if err != nil {
		return nil, errors.Wrapf(err, "object not found")
	}

	buf := new(bytes.Buffer)
	buf.ReadFrom(rc.Body)

	bytes, err := ioutil.ReadAll(buf)
	if err != nil {
		return nil, errors.Wrapf(err, "unable to read objects bytes buffer")
	}

	return bytes, nil
}
