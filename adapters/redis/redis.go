package redis

import (
	"context"
	"encoding/json"
	"fmt"

	log "github.com/robpaul9/golog"

	"github.com/go-redis/redis/v8"
	"github.com/google/uuid"
	"github.com/robpaul9/cloud-object-malware-scanner/models"
)

type Config struct {
	Logger        log.Logger
	Message       models.PublishedMessage
	RedisPort     string
	RedisHost     string
	RedisPassword string
	PubSubTopic   string
	RedisDatabase int
}

type RedisInterface interface {
	Publish(models.PublishedMessage) (string, error)
}

type Service struct {
	Client *redis.Client
	*Config
	RedisInterface
	Ctx context.Context
}

func New(config *Config) *Service {

	ctx := context.Background()

	client := redis.NewClient(&redis.Options{
		Addr:     fmt.Sprintf("%s:%s", config.RedisHost, config.RedisPort),
		Password: config.RedisPassword,
	})

	return &Service{
		Client: client,
		Config: config,
		Ctx:    ctx,
	}
}

func (s *Service) Publish(message models.PublishedMessage) (interface{}, error) {
	b, err := json.Marshal(message)
	if err != nil {
		return nil, err
	}

	if err := s.Client.Publish(s.Ctx, s.PubSubTopic, string(b)).Err(); err != nil {
		return nil, err
	}

	message.ID = uuid.New().String()

	return message.ID, nil
}
