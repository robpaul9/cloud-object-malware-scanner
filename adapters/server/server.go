package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/gorilla/mux"
	"github.com/robpaul9/cloud-object-malware-scanner/entities/pool"
	"github.com/robpaul9/cloud-object-malware-scanner/models"
	cloudstorage "github.com/robpaul9/cloud-object-malware-scanner/usecases/cloud-storage"
	"github.com/robpaul9/cloud-object-malware-scanner/usecases/middleware"
	"github.com/robpaul9/cloud-object-malware-scanner/usecases/parse"
	"github.com/robpaul9/cloud-object-malware-scanner/usecases/pubsub"
	"github.com/robpaul9/cloud-object-malware-scanner/usecases/scanner"
	log "github.com/robpaul9/golog"
)

type Config struct {
	DDAgentHost         string
	DDAgentPort         string
	ServiceName         string
	ServicePort         string
	PubSubTopic         string
	Logger              log.Logger
	MiddlewareService   middleware.Service
	PubSubService       pubsub.Service
	CloudStorageService cloudstorage.Service
	ScannerService      scanner.Service
	Dispatcher          pool.Dispatcher
}

type Server struct {
	*Config
	Router *mux.Router
}

func New(config *Config) *Server {
	return &Server{
		Config: config,
		Router: mux.NewRouter().StrictSlash(true),
	}
}

func (s *Server) Start() {
	s.Router.Handle("/v1/health",
		s.MiddlewareService.GetRequest(
			s.MiddlewareService.RequireHeaders(
				s.MiddlewareService.Auth(
					http.HandlerFunc(s.Health)))))

	s.Router.Handle("/v1/scan",
		s.MiddlewareService.PostRequest(
			s.MiddlewareService.RequireHeaders(
				s.MiddlewareService.Auth(
					http.HandlerFunc(s.Scan)))))

	address := fmt.Sprintf("0.0.0.0:%s", s.ServicePort)
	s.Logger.Infof("application is serving on %s", address)

	s.Logger.Fatal(http.ListenAndServe(address, s.Router))

}

func (s *Server) Health(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)
}

func (s *Server) Scan(w http.ResponseWriter, r *http.Request) {

	ctx := context.Background()

	event, _ := parse.RequestBody(r)
	reqHeaders := parse.RequestHeaders(r)

	err := s.requestValidationHandler(ctx, &event, &reqHeaders)
	if err != nil {
		response := models.HttpResponse{
			Status:  false,
			Message: err.Error(),
		}
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}

	jobID := uuid.New().String()

	scanService := scanner.New(&scanner.Config{
		Event:          &event,
		Context:        ctx,
		Logger:         s.Logger,
		RequestHeaders: reqHeaders,
		ScanID:         jobID,
		PubSubService:  s.PubSubService,
		PubSubTopic:    s.PubSubTopic,
	})

	jobMetaData := make(map[string]string)
	jobMetaData["scan_event_cloud_provider"] = event.CloudProvider
	jobMetaData["scan_event_object_identifier"] = event.ObjectIdentifier
	jobMetaData["scan_event_object_name"] = event.ObjectName
	jobMetaData["scan_event_storage_bucket_name"] = event.StorageBucketName

	s.Dispatcher.DispatchJob(&pool.Job{
		ID:       jobID,
		Process:  scanService.Scan,
		Name:     "scanService.Scan",
		Metadata: jobMetaData,
	})

	w.WriteHeader(http.StatusOK)
}

func (s *Server) Stop() {
	if s.Router != nil {
		return
	}
}

func (s *Server) requestValidationHandler(ctx context.Context, event *models.RequestBody, requestHeaders *models.RequestHeaders) error {
	err := parse.RequestFields(event)
	if err != nil {
		s.Logger.WarnWithFields("unable to validate scan request", log.LogFields{
			"reason":          err,
			"x-client-id":     requestHeaders.ClientID,
			"x-forwarder-for": requestHeaders.XForwardedFor,
			"remote-addr":     requestHeaders.RemoteAddr,
		})
		return err
	}

	s.CloudStorageService.Config.Event = *event
	s.CloudStorageService.Config.RequestHeaders = *requestHeaders
	s.CloudStorageService.Config.Context = ctx

	err = s.CloudStorageService.DoesObjectExist()
	if err != nil {
		s.Logger.WarnWithFields("unable to validate scan request", log.LogFields{
			"reason":          err,
			"x-client-id":     requestHeaders.ClientID,
			"x-forwarder-for": requestHeaders.XForwardedFor,
			"remote-addr":     requestHeaders.RemoteAddr,
		})
		return err
	}

	return nil
}
