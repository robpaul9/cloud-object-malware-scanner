package server

import (
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/robpaul9/cloud-object-malware-scanner/usecases/middleware"
	log "github.com/robpaul9/golog"
)

type Config struct {
	DDAgentHost       string
	DDAgentPort       string
	ServiceName       string
	ServicePort       string
	Logger            log.Logger
	MiddlewareService middleware.Service
}

type Server struct {
	*Config
	Router *mux.Router
}

func New(config *Config) *Server {
	return &Server{
		Config: config,
		Router: mux.NewRouter().StrictSlash(true),
	}
}

func (s *Server) Start() {
	s.Router.Handle("/v1/health",
		s.MiddlewareService.GetRequest(
			s.MiddlewareService.RequireHeaders(
				s.MiddlewareService.Auth(
					http.HandlerFunc(s.Health)))))

	address := fmt.Sprintf("0.0.0.0:%s", s.ServicePort)
	s.Logger.Infof("application is serving on %s", address)

	s.Logger.Fatal(http.ListenAndServe(address, s.Router))

}
func (s *Server) Health(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)
}

func (s *Server) Stop() {
	if s.Router != nil {
		return
	}
}
