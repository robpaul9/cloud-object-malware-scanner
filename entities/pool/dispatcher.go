package pool

import (
	"strconv"
	"sync"

	log "github.com/robpaul9/golog"
)

type Dispatcher struct {
	MaxWorkers int
	Workers    []Worker
	JobQueue   chan Job
	Logger     log.Logger
	wg         sync.WaitGroup
	quitChan   chan struct{}
}

func NewDispatcher(maxWorkers int, maxQueue int, logger log.Logger) (*Dispatcher, chan struct{}) {
	jobq := make(chan Job, maxQueue)
	qc := make(chan struct{})

	return &Dispatcher{
		MaxWorkers: maxWorkers,
		JobQueue:   jobq,
		Logger:     logger,
		quitChan:   qc,
	}, qc
}

func (d *Dispatcher) Run() {
	defer close(d.quitChan)
	for i := 0; i < d.MaxWorkers; i++ {
		worker := newWorker(d.JobQueue, d.Logger, &d.wg)
		worker.ID = "worker-" + strconv.Itoa(i+1)
		d.wg.Add(1)
		d.Workers = append(d.Workers, worker)
		go worker.Start()
	}
	d.wg.Wait()
}

func (d *Dispatcher) Stop() {
	for _, w := range d.Workers {
		w.Stop()
	}
}

func (d *Dispatcher) DispatchJob(j *Job) {
	d.JobQueue <- *j
}
