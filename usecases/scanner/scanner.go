package scanner

import (
	"context"
	"fmt"

	"github.com/robpaul9/cloud-object-malware-scanner/entities/hash"
	log "github.com/robpaul9/golog"

	"github.com/robpaul9/cloud-object-malware-scanner/models"
	cloudstorage "github.com/robpaul9/cloud-object-malware-scanner/usecases/cloud-storage"
	"github.com/robpaul9/cloud-object-malware-scanner/usecases/pubsub"
)

type Config struct {
	Event               *models.RequestBody
	Logger              log.Logger
	Context             context.Context
	CloudStorageService *cloudstorage.Service
	RequestHeaders      models.RequestHeaders
	PubSubService       pubsub.Service
	ScanID              string
	PubSubTopic         string
}

type Service struct {
	*Config
}

func New(config *Config) *Service {
	return &Service{
		Config: config,
	}
}

func (s *Service) Scan() error {
	var publishMessage models.PublishedMessage

	publishMessage.ClientID = s.RequestHeaders.ClientID
	publishMessage.ScanID = s.ScanID
	publishMessage.ObjectIdentifier = s.Event.ObjectIdentifier
	publishMessage.Topic = s.PubSubTopic
	publishMessage.ScanObject = fmt.Sprintf(
		"%s:%s/%s", s.Event.CloudProvider, s.Event.StorageBucketName, s.Event.ObjectName)

	b, err := s.CloudStorageService.ReadObjectBytes()
	if err != nil {
		s.PubSubService.LogAndPublishError(err)
		return err
	}

	s.Logger.InfoWithFields(
		fmt.Sprintf("object %s:%s/%s found", s.Event.CloudProvider,
			s.Event.StorageBucketName, s.Event.ObjectName), log.LogFields{
			"object_length":           len(b),
			"client_id":               s.RequestHeaders.ClientID,
			"object_name":             s.Event.ObjectName,
			"bucket_name":             s.Event.StorageBucketName,
			"cloud_provider":          s.Event.CloudProvider,
			"object_digest":           "",
			"object_identifier":       s.Event.ObjectIdentifier,
			"x_forwarded_for_address": s.RequestHeaders.XForwardedFor,
			"remote_addr":             s.RequestHeaders.RemoteAddr,
			"scan_id":                 s.ScanID,
			"poll_id":                 "",
			"request_authenticated":   "true",
		})

	digest := hash.SHA256(b)

	return nil

}
