package malwarescanner

import (
	"context"
	"time"

	log "github.com/robpaul9/golog"

	"github.com/pkg/errors"
	"github.com/robpaul9/cloud-object-malware-scanner/adapters/metadefender"
	"github.com/robpaul9/cloud-object-malware-scanner/models"
)

type Config struct {
	Logger                 log.Logger
	Context                context.Context
	MetadefenderInterface  *metadefender.Service
	RequestHeaders         models.RequestHeaders
	Event                  models.RequestBody
	ScanResultsPollTimeout int
	Digest                 string
	Object                 []byte
}

type Service struct {
	*Config
}

func New(config *Config) *Service {
	return &Service{
		Config: config,
	}
}

func (s *Service) LookupHash() (models.ScanResults, error) {

	if s.Digest == "" {
		return models.ScanResults{}, errors.New("empty digest value, unable to perform hash lookup")
	}

	results, err := s.MetadefenderInterface.LookupHash(s.Digest)
	if err != nil {
		return models.ScanResults{}, err
	}

	return results, nil

}

func (s *Service) ScanBytes() (map[string]interface{}, error) {
	var scanResults map[string]interface{}

	if len(s.Object) == 0 {
		return nil, errors.New("empty object, unable to scan bytes")
	}

	scanResults, err := s.MetadefenderInterface.ScanBytes(s.Object)
	if err != nil {
		return nil, err
	}

	return scanResults, nil

}

func (s *Service) PollResults() (models.ScanResults, error) {

	errorCounter := 0

	for i := 1; i < (s.ScanResultsPollTimeout / 5); i++ {

		s.Logger.Infof("polling for scan results. attempt %d", i)

		results, err := s.LookupHash()
		if err != nil {
			if errorCounter == 5 {
				return models.ScanResults{}, errors.Wrapf(err, "unable to complete polling for scan results")
			}
			errorCounter += 1
			s.Logger.Error(errors.Wrapf(err, "hash lookup failed polling for scan results, trying again. attempt: %d", errorCounter))
		}

		if results.ScanResultInt != 254 {
			return results, nil
		}

		time.Sleep(time.Second * 15)

	}

	return models.ScanResults{}, errors.New("polling for scan results timed out. unable to obtain results.")
}
