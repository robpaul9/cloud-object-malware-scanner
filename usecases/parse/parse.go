package parse

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/pkg/errors"
	"github.com/robpaul9/cloud-object-malware-scanner/models"
)

func RequestHeaders(r *http.Request) models.RequestHeaders {
	clientID := r.Header.Get("x-client-id")
	apiKey := r.Header.Get("x-api-key")
	xForwardedFor := r.Header.Get("x-forwarded-for")

	reqHeaders := models.RequestHeaders{
		APIKey:        apiKey,
		ClientID:      clientID,
		XForwardedFor: xForwardedFor,
		RemoteAddr:    r.RemoteAddr,
	}

	return reqHeaders
}

func RequestBody(r *http.Request) (models.RequestBody, error) {
	var payload models.RequestBody

	err := json.NewDecoder(r.Body).Decode(&payload)
	if err != nil {
		return payload, errors.Wrapf(err, "unable to decode request body")
	}

	return payload, nil
}

func RequestFields(event *models.RequestBody) error {
	var errors_ []string

	if event.ObjectName == "" {
		errors_ = append(errors_, "object_name field missing")
	}

	if event.StorageBucketName == "" {
		errors_ = append(errors_, "storage_bucket_name field missing")
	}

	if event.CloudProvider == "" {
		errors_ = append(errors_, "cloud_provider field missing")
	}

	if event.CloudProvider != "gcp" && event.CloudProvider != "aws" && event.CloudProvider != "" {
		errors_ = append(errors_, "only gcp and aws cloud providers are supported")
	}

	if errors_ != nil {
		return errors.New(strings.Join(errors_, ", "))
	}

	return nil

}
