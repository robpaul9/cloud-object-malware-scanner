package pubsub

import (
	"fmt"

	log "github.com/robpaul9/golog"

	"github.com/robpaul9/cloud-object-malware-scanner/adapters/redis"
	"github.com/robpaul9/cloud-object-malware-scanner/models"
)

type Config struct {
	Logger         log.Logger
	RedisInterface *redis.Service
	RequestHeaders models.RequestHeaders
	Event          models.RequestBody
	ScanResultStr  string
	ScanResultInt  int
	Digest         string
	ScanID         string
	PollID         string
}

type Service struct {
	*Config
}

func New(config *Config) *Service {
	return &Service{
		Config: config,
	}
}

func (s *Service) Publish(message models.PublishedMessage) (string, error) {
	r, err := s.RedisInterface.Publish(message)
	if err != nil {
		s.Logger.Error("unable to publish message", err)
		return "", nil
	}

	s.Logger.InfoWithFields("message published", log.LogFields{
		"message_id": r,
	})

	return "", nil

}

func (s *Service) LogAndPublishError(err error) error {
	s.Logger.ErrorWithFields(err, log.LogFields{
		"client_id":               s.RequestHeaders.ClientID,
		"object_name":             s.Event.ObjectName,
		"bucket_name":             s.Event.StorageBucketName,
		"cloud_provider":          s.Event.CloudProvider,
		"object_digest":           s.Digest,
		"object_identifier":       s.Event.ObjectIdentifier,
		"x_forwarded_for_address": s.RequestHeaders.XForwardedFor,
		"remote_addr":             s.RequestHeaders.RemoteAddr,
		"scan_id":                 s.ScanID,
		"poll_id":                 s.PollID,
		"request_authenticated":   "true",
	})

	publishedMessage := models.PublishedMessage{
		ClientID:         s.RequestHeaders.ClientID,
		Error:            err.Error(),
		ObjectIdentifier: s.Event.ObjectIdentifier,
		ScanObject:       fmt.Sprintf("%s/%s", s.Event.StorageBucketName, s.Event.ObjectName),
		ScanResultString: "",
		ScanResultInt:    -1,
		ObjectDigest:     s.Digest,
		ScanID:           s.ScanID,
		PollID:           s.PollID,
	}

	id, err := s.Publish(publishedMessage)

	if err != nil {
		s.Logger.ErrorWithFields(err, log.LogFields{
			"client_id":               s.RequestHeaders.ClientID,
			"object_name":             s.Event.ObjectName,
			"bucket_name":             s.Event.StorageBucketName,
			"cloud_provider":          s.Event.CloudProvider,
			"object_digest":           s.Digest,
			"object_identifier":       s.Event.ObjectIdentifier,
			"x_forwarded_for_address": s.RequestHeaders.XForwardedFor,
			"remote_addr":             s.RequestHeaders.RemoteAddr,
			"scan_id":                 s.ScanID,
			"poll_id":                 s.PollID,
			"request_authenticated":   "true",
		})
		return err
	}

	s.Logger.WarnWithFields("error message published", log.LogFields{
		"client_id":               s.RequestHeaders.ClientID,
		"object_name":             s.Event.ObjectName,
		"bucket_name":             s.Event.StorageBucketName,
		"cloud_provider":          s.Event.CloudProvider,
		"object_digest":           s.Digest,
		"object_identifier":       s.Event.ObjectIdentifier,
		"x_forwarded_for_address": s.RequestHeaders.XForwardedFor,
		"scan_id":                 s.ScanID,
		"poll_id":                 s.PollID,
		"message_id":              id,
		"request_authenticated":   "true",
		"remote_addr":             s.RequestHeaders.RemoteAddr,
	})

	return nil

}

func (s *Service) LogAndPublishSuccess(msg string) error {
	publishedMessage := models.PublishedMessage{
		ClientID:         s.RequestHeaders.ClientID,
		Error:            "",
		ObjectIdentifier: s.Event.ObjectIdentifier,
		ScanObject:       fmt.Sprintf("%s/%s", s.Event.StorageBucketName, s.Event.ObjectName),
		ScanResultString: s.ScanResultStr,
		ScanResultInt:    s.ScanResultInt,
		ObjectDigest:     s.Digest,
		ScanID:           s.ScanID,
		PollID:           s.PollID,
		Message:          msg,
	}

	id, err := s.Publish(publishedMessage)

	if err != nil {
		s.Logger.ErrorWithFields(err, log.LogFields{
			"client_id":               s.RequestHeaders.ClientID,
			"object_name":             s.Event.ObjectName,
			"bucket_name":             s.Event.StorageBucketName,
			"cloud_provider":          s.Event.CloudProvider,
			"object_identifier":       s.Event.ObjectIdentifier,
			"x_forwarded_for_address": s.RequestHeaders.XForwardedFor,
			"scan_result":             s.ScanResultStr,
			"object_digest":           s.Digest,
			"result":                  "unable to publish message",
			"scan_id":                 s.ScanID,
			"poll_id":                 s.PollID,
			"request_authenticated":   "true",
			"remote_addr":             s.RequestHeaders.RemoteAddr,
		})
		return err
	}

	s.Logger.InfoWithFields("message published", log.LogFields{
		"client_id":               s.RequestHeaders.ClientID,
		"object_name":             s.Event.ObjectName,
		"bucket_name":             s.Event.StorageBucketName,
		"cloud_provider":          s.Event.CloudProvider,
		"object_identifier":       s.Event.ObjectIdentifier,
		"x_forwarded_for_address": s.RequestHeaders.XForwardedFor,
		"message_id":              id,
		"scan_result_str":         s.ScanResultStr,
		"scan_result_int":         s.ScanResultInt,
		"object_digest":           s.Digest,
		"result":                  msg,
		"scan_id":                 s.ScanID,
		"poll_id":                 s.PollID,
		"request_authenticated":   "true",
		"remote_addr":             s.RequestHeaders.RemoteAddr,
	})

	return nil

}
