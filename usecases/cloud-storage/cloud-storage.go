package cloudstorage

import (
	"context"
	"errors"
	"fmt"

	log "github.com/robpaul9/golog"

	"github.com/robpaul9/cloud-object-malware-scanner/adapters/aws"
	"github.com/robpaul9/cloud-object-malware-scanner/adapters/gcp"
	"github.com/robpaul9/cloud-object-malware-scanner/models"
)

type Config struct {
	Logger         log.Logger
	Event          models.RequestBody
	Context        context.Context
	RequestHeaders models.RequestHeaders
	GCPInterface   gcp.GCPInterface
	AWSInterface   aws.AWSInterface
}

type Service struct {
	*Config
}

func New(config *Config) *Service {
	return &Service{
		Config: config,
	}
}

func (s *Service) DoesObjectExist() error {
	if s.Event.CloudProvider == "gcp" {
		err := s.GCPInterface.DoesObjectExist(s.Event.StorageBucketName, s.Event.ObjectName)
		if err != nil {
			return err
		}
		return nil
	} else if s.Event.CloudProvider == "aws" {
		err := s.AWSInterface.DoesObjectExist(s.Event.StorageBucketName, s.Event.ObjectName)
		if err != nil {
			return err
		}
		return nil
	}

	return errors.New("internal error, no supported cloud provider found. unable to read object")

}

func (s *Service) ReadObjectBytes() ([]byte, error) {

	fmt.Println(s.Event)
	if s.Event.CloudProvider == "gcp" {
		obj, err := s.GCPInterface.ReadObjectBytes(s.Event.StorageBucketName, s.Event.ObjectName)
		if err != nil {
			return nil, err
		}

		return obj, nil
	} else if s.Event.CloudProvider == "aws" {
		obj, err := s.AWSInterface.ReadObjectBytes(s.Event.StorageBucketName, s.Event.ObjectName)
		if err != nil {
			return nil, err
		}

		return obj, nil
	}

	return nil, errors.New("internal error, no supported cloud provider found. unable to read object")

}
